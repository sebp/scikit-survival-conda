#!/usr/bin/env python
from __future__ import print_function

import argparse
import contextlib
import hashlib
import os
import shutil
import subprocess
import sys
import tempfile

from binstar_client.utils import get_server_api
import binstar_client.errors
from conda_build.conda_interface import subdir as conda_subdir
from conda_build.conda_interface import get_index
from conda_build.metadata import MetaData
from conda_build.api import get_output_file_paths
from conda_build.config import Config


@contextlib.contextmanager
def get_temp_token(token):
    dn = tempfile.mkdtemp()
    fn = os.path.join(dn, "binstar.token")
    with open(fn, "w") as fh:
        fh.write(token)
    yield fn
    shutil.rmtree(dn)


def built_distribution_already_exists(cli, pkg_name, meta, owner):
    """
    Checks to see whether the built recipe (aka distribution) already
    exists on the owner/user's binstar account.

    """
    distro_name = '{}/{}'.format(conda_subdir, pkg_name)

    try:
        dist_info = cli.distribution(owner, meta.name(), meta.version(),
                                     distro_name)
    except binstar_client.errors.NotFound:
        return False

    exists = bool(dist_info)
    return exists


def upload(cli, fname, meta, owner, channels):
    with get_temp_token(cli.token) as fn:
        subprocess.check_call(['anaconda', '-t', fn,
                               'upload', fname,
                               '--user={}'.format(owner),
                               '--channel={}'.format(channels)],
                              env=os.environ)


def main():
    token = os.environ.get('BINSTAR_TOKEN')

    description = ('Upload or check consistency of a built version of a '
                   'conda recipe with binstar. Note: The existence of the '
                   'BINSTAR_TOKEN environment variable determines '
                   'whether the upload should actually take place.')
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('recipe_dir', help='the conda recipe directory')
    parser.add_argument('owner', help='the binstar owner/user')
    parser.add_argument('--channel', help='the binstar channel', default='main')
    args = parser.parse_args()
    recipe_dir, owner, channel = args.recipe_dir, args.owner, args.channel

    cli = get_server_api(token=token)
    meta = MetaData(recipe_dir)

    if meta.skip():
        print("No upload to take place - this configuration was skipped in build/skip.")
        return

    for fname in get_output_file_paths(args.recipe_dir):
        pkg_name = os.path.basename(fname)
        exists = built_distribution_already_exists(cli, pkg_name, meta, owner)
        if token:
            if not exists:
                upload(cli, fname, meta, owner, channel)
                print('Uploaded {}'.format(pkg_name))
            else:
                print('Distribution {} already \nexists for {}.'
                      ''.format(pkg_name, owner))
        else:
            print("No BINSTAR_TOKEN present, so no upload is taking place. "
                  "The distribution just built {} already available for {}."
                  "".format('is' if exists else 'is not', owner))

if __name__ == '__main__':
    main()
